// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using back_end.Models;

#nullable disable

namespace back_end.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("back_end.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Adidas"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Nike"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Puma"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Louis Vuitton"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Jordan"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Convert"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Canvas"
                        });
                });

            modelBuilder.Entity("back_end.Models.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Xanh Navy"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Trắng Kem"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Xanh Rêu"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Cam"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Đen"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Hồng"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Nâu"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Xanh Dương"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Kem"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Hồng Kem"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Xanh Lá Cây"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Xanh Dương"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Xám"
                        });
                });

            modelBuilder.Entity("back_end.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("back_end.Models.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<int>("QuantityOrder")
                        .HasColumnType("int");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColorId")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId")
                        .IsUnique();

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("back_end.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ColorId")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImagesProduct")
                        .HasColumnType("longtext");

                    b.Property<string>("NameProduct")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("NumberOfProductInStock")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfProductSold")
                        .HasColumnType("int");

                    b.Property<double>("PriceProduct")
                        .HasColumnType("double");

                    b.Property<string>("SizeId")
                        .HasColumnType("longtext");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("back_end.Models.ProductColor", b =>
                {
                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("ColorId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductColors");
                });

            modelBuilder.Entity("back_end.Models.ProductSize", b =>
                {
                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("SizeId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductSizes");
                });

            modelBuilder.Entity("back_end.Models.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NumberOfSize")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NumberOfSize = "36"
                        },
                        new
                        {
                            Id = 2,
                            NumberOfSize = "37"
                        },
                        new
                        {
                            Id = 3,
                            NumberOfSize = "38"
                        },
                        new
                        {
                            Id = 4,
                            NumberOfSize = "39"
                        },
                        new
                        {
                            Id = 5,
                            NumberOfSize = "40"
                        },
                        new
                        {
                            Id = 6,
                            NumberOfSize = "41"
                        },
                        new
                        {
                            Id = 7,
                            NumberOfSize = "42"
                        },
                        new
                        {
                            Id = 8,
                            NumberOfSize = "43"
                        },
                        new
                        {
                            Id = 9,
                            NumberOfSize = "44"
                        },
                        new
                        {
                            Id = 10,
                            NumberOfSize = "45"
                        },
                        new
                        {
                            Id = 11,
                            NumberOfSize = "46"
                        },
                        new
                        {
                            Id = 12,
                            NumberOfSize = "47"
                        },
                        new
                        {
                            Id = 13,
                            NumberOfSize = "48"
                        });
                });

            modelBuilder.Entity("back_end.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("77c7a0d1-ad2a-4ac6-9c2f-de5e3cabf9c3"),
                            Email = "admin@minhstore.com",
                            Password = "$2a$11$hZuClfgGn7tr4roqiSKIVu/3uttIVLesVOb/VlHW7J8uYBTQwCK4O",
                            Role = "Admin"
                        },
                        new
                        {
                            Id = new Guid("db1fe48d-a519-4984-8125-cca4196c0be9"),
                            Email = "user123@gmail.com",
                            Password = "$2a$11$mNgAghZpp6NN4zPUn.GJJOpe3Fd7KyupH1D5MUY7B.ofGH/sDke7G",
                            Role = "User"
                        },
                        new
                        {
                            Id = new Guid("87eba36e-5ebd-4f6e-8f5f-af4d7a3334e7"),
                            Email = "user456@gmail.com",
                            Password = "$2a$11$jmjuPw/55GdmNQNaJq2ppOR0mTzJ9IYVKIS0.tGCOIAKaTRYmQAb.",
                            Role = "User"
                        },
                        new
                        {
                            Id = new Guid("b5e4b6f9-aecb-4e7b-80e1-854feea6e30f"),
                            Email = "user789@gmail.com",
                            Password = "$2a$11$7row6sE6MbkevGNOhvWCLeLQnj6gTT1CTzDNvVZqJH7EnoaldCBp.",
                            Role = "User"
                        });
                });

            modelBuilder.Entity("back_end.Models.Order", b =>
                {
                    b.HasOne("back_end.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("back_end.Models.OrderDetail", b =>
                {
                    b.HasOne("back_end.Models.Color", "Color")
                        .WithOne()
                        .HasForeignKey("back_end.Models.OrderDetail", "ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("back_end.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("back_end.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("back_end.Models.Size", "Size")
                        .WithOne()
                        .HasForeignKey("back_end.Models.OrderDetail", "SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("back_end.Models.Product", b =>
                {
                    b.HasOne("back_end.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("back_end.Models.ProductColor", b =>
                {
                    b.HasOne("back_end.Models.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("back_end.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("back_end.Models.ProductSize", b =>
                {
                    b.HasOne("back_end.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("back_end.Models.Size", null)
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("back_end.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("back_end.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("back_end.Models.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("back_end.Models.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
